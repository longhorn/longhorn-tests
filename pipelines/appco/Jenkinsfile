def imageName = "${JOB_BASE_NAME}-${env.BUILD_NUMBER}"
def summary
def BUILD_TRIGGER_BY = "\n${currentBuild.getBuildCauses()[0].shortDescription}"

def REGISTRATION_CODE_ID = params.ARCH == "amd64" ? "REGISTRATION_CODE" : "REGISTRATION_CODE_ARM64"

node {

    withCredentials([
        string(credentialsId: REGISTRATION_CODE_ID, variable: 'REGISTRATION_CODE'),
        usernamePassword(credentialsId: 'LAB_API_KEY', passwordVariable: 'LAB_SECRET_KEY', usernameVariable: 'LAB_ACCESS_KEY'),
        string(credentialsId: 'LAB_URL', variable: 'LAB_URL'),
        file(credentialsId: 'SUSE_INTERNAL_CA', variable: 'CA_CERT_PATH')  // Add the secret file credential here
    ]) {

        if (params.SEND_SLACK_NOTIFICATION) {
            notifyBuild('STARTED', BUILD_TRIGGER_BY, params.NOTIFY_SLACK_CHANNEL)
        }

        checkout scm

        try {

            stage('build') {

                echo "Using registration code: $REGISTRATION_CODE_ID"

                sh "cp ${CA_CERT_PATH} SUSE_Trust_Root.crt"
                sh "pipelines/appco/scripts/build.sh"
                sh """ docker run -itd --name ${JOB_BASE_NAME}-${BUILD_NUMBER} \
                                       --env LONGHORN_REPO_URI=${LONGHORN_REPO_URI} \
                                       --env LONGHORN_REPO_BRANCH=${LONGHORN_REPO_BRANCH} \
                                       --env CUSTOM_LONGHORN_ENGINE_IMAGE=${CUSTOM_LONGHORN_ENGINE_IMAGE} \
                                       --env CUSTOM_LONGHORN_INSTANCE_MANAGER_IMAGE=${CUSTOM_LONGHORN_INSTANCE_MANAGER_IMAGE} \
                                       --env CUSTOM_LONGHORN_MANAGER_IMAGE=${CUSTOM_LONGHORN_MANAGER_IMAGE} \
                                       --env CUSTOM_LONGHORN_SHARE_MANAGER_IMAGE=${CUSTOM_LONGHORN_SHARE_MANAGER_IMAGE} \
                                       --env CUSTOM_LONGHORN_BACKING_IMAGE_MANAGER_IMAGE=${CUSTOM_LONGHORN_BACKING_IMAGE_MANAGER_IMAGE} \
                                       --env CUSTOM_LONGHORN_UI_IMAGE=${CUSTOM_LONGHORN_UI_IMAGE} \
                                       --env CUSTOM_LONGHORN_SUPPORT_BUNDLE_IMAGE=${CUSTOM_LONGHORN_SUPPORT_BUNDLE_IMAGE} \
                                       --env CUSTOM_LONGHORN_CSI_ATTACHER_IMAGE=${CUSTOM_LONGHORN_CSI_ATTACHER_IMAGE} \
                                       --env CUSTOM_LONGHORN_CSI_PROVISIONER_IMAGE=${CUSTOM_LONGHORN_CSI_PROVISIONER_IMAGE} \
                                       --env CUSTOM_LONGHORN_CSI_NODE_DRIVER_REGISTRAR_IMAGE=${CUSTOM_LONGHORN_CSI_NODE_DRIVER_REGISTRAR_IMAGE} \
                                       --env CUSTOM_LONGHORN_CSI_RESIZER_IMAGE=${CUSTOM_LONGHORN_CSI_RESIZER_IMAGE} \
                                       --env CUSTOM_LONGHORN_CSI_SNAPSHOTTER_IMAGE=${CUSTOM_LONGHORN_CSI_SNAPSHOTTER_IMAGE} \
                                       --env CUSTOM_LONGHORN_CSI_LIVENESSPROBE_IMAGE=${CUSTOM_LONGHORN_CSI_LIVENESSPROBE_IMAGE} \
                                       --env LONGHORN_TESTS_CUSTOM_IMAGE=${LONGHORN_TESTS_CUSTOM_IMAGE} \
                                       --env DISTRO=${DISTRO} \
                                       --env LONGHORN_TEST_CLOUDPROVIDER=${LONGHORN_TEST_CLOUDPROVIDER} \
                                       --env LONGHORN_UPGRADE_TEST=${LONGHORN_UPGRADE_TEST} \
                                       --env LONGHORN_STABLE_VERSION=${LONGHORN_STABLE_VERSION} \
                                       --env LONGHORN_TRANSIENT_VERSION=${LONGHORN_TRANSIENT_VERSION} \
                                       --env PYTEST_CUSTOM_OPTIONS="${PYTEST_CUSTOM_OPTIONS}" \
                                       --env BACKUP_STORE_TYPE="${BACKUP_STORE_TYPE}" \
                                       --env TF_VAR_arch=${ARCH} \
                                       --env TF_VAR_tf_workspace=${TF_VAR_tf_workspace} \
                                       --env TF_VAR_k8s_distro_name=${K8S_DISTRO_NAME} \
                                       --env TF_VAR_k8s_distro_version=${K8S_DISTRO_VERSION} \
                                       --env TF_VAR_registration_code=${REGISTRATION_CODE} \
                                       --env TF_VAR_lab_url=${LAB_URL} \
                                       --env TF_VAR_lab_access_key=${LAB_ACCESS_KEY} \
                                       --env TF_VAR_lab_secret_key=${LAB_SECRET_KEY} \
                                       --env RUN_V2_TEST=${RUN_V2_TEST} \
                                       ${imageName}
                """
            }

            timeout(60) {
                stage ('terraform') {
                    sh "docker exec ${JOB_BASE_NAME}-${BUILD_NUMBER} pipelines/utilities/terraform_setup.sh"
                }
			}

            stage ('longhorn setup & tests') {
                sh "docker exec ${JOB_BASE_NAME}-${BUILD_NUMBER} pipelines/appco/scripts/longhorn-setup.sh"
            }

            // https://github.com/rancher/suse-storage/issues/22, finding alternative way to do the same thing
            //stage ('download support bundle') {
            //   sh "docker exec ${JOB_BASE_NAME}-${BUILD_NUMBER} pipelines/utilities/download_support_bundle.sh  ${JOB_BASE_NAME}-${BUILD_NUMBER}-bundle.zip"
            //    sh "docker cp ${JOB_BASE_NAME}-${BUILD_NUMBER}:${TF_VAR_tf_workspace}/${JOB_BASE_NAME}-${BUILD_NUMBER}-bundle.zip ."
			//	archiveArtifacts allowEmptyArchive: true, artifacts: '**/*.zip', followSymlinks: false
			//}

            stage ('report generation') {
                sh "docker cp ${JOB_BASE_NAME}-${BUILD_NUMBER}:${TF_VAR_tf_workspace}/longhorn-test-junit-report.xml ."

                if(params.LONGHORN_UPGRADE_TEST) {
                    sh "docker cp ${JOB_BASE_NAME}-${BUILD_NUMBER}:${TF_VAR_tf_workspace}/longhorn-test-upgrade-junit-report.xml ."
                    summary = junit 'longhorn-test-upgrade-junit-report.xml, longhorn-test-junit-report.xml'
                }
                else {
                    summary = junit 'longhorn-test-junit-report.xml'
                }
            }

        } catch (e) {
            currentBuild.result = "FAILED"
            throw e
        } finally {
            stage ('releasing resources') {
                if (sh (script: "docker container inspect ${JOB_BASE_NAME}-${BUILD_NUMBER} > /dev/null 2>&1", returnStatus: true) == 0) {
                    sh "docker exec ${JOB_BASE_NAME}-${BUILD_NUMBER} pipelines/utilities/cleanup.sh"
                    sh "docker stop ${JOB_BASE_NAME}-${BUILD_NUMBER}"
                    sh "docker rm -v ${JOB_BASE_NAME}-${BUILD_NUMBER}"
                    sh "docker rmi ${imageName}"
                }

                if (summary) {
                    summary_msg = "\nTest Summary - Failures: ${summary.failCount}, Skipped: ${summary.skipCount}, Passed: ${summary.passCount}  -- Job completed in ${currentBuild.durationString.replace(' and counting', '')}"
                } else {
                    summary_msg = "\n Test Failed: No Junit report"
                }

                if(params.SEND_SLACK_NOTIFICATION){
                    notifyBuild(currentBuild.result, summary_msg, params.NOTIFY_SLACK_CHANNEL)
                }
            }
        }
    }

}


def notifyBuild(String buildStatus = 'STARTED', String summary_msg, String slack_channel) {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def color = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_BASE_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})" + summary_msg

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary, channel: slack_channel,  tokenCredentialId: 'longhorn-tests-slack-token')
}
