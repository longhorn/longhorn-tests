def imageName = "${JOB_BASE_NAME}-${env.BUILD_NUMBER}"
def summary
def BUILD_TRIGGER_BY = "\n${currentBuild.getBuildCauses()[0].shortDescription}"
def CREDS_ID = JOB_BASE_NAME == "longhorn-tests-regression" ? "AWS_CREDS_RANCHER_QA" : "AWS_CREDS"
def REGISTRATION_CODE_ID = params.ARCH == "amd64" ? "REGISTRATION_CODE" : "REGISTRATION_CODE_ARM64"
def registry_instance_type = params.ARCH == "amd64" ? "t2.micro" : (ARCH == "arm64" ? "t4g.micro" : null)
def AIR_GAP_INSTALLATION = params.AIR_GAP_INSTALLATION ? params.AIR_GAP_INSTALLATION : false
def REGISTRY_URL = ""
def RUN_V2_TEST = params.RUN_V2_TEST ? params.RUN_V2_TEST : false
def ENABLE_MTLS = params.ENABLE_MTLS ? params.ENABLE_MTLS : false
def USE_HDD = params.USE_HDD ? params.USE_HDD : false
def WORKSPACE = "/src/longhorn-tests"

def STABLE_MANAGER_IMAGE
def STABLE_ENGINE_IMAGE
def STABLE_INSTANCE_MANAGER_IMAGE
def STABLE_SHARE_MANAGER_IMAGE
def STABLE_BACKING_IMAGE_MANAGER_IMAGE
def STABLE_UI_IMAGE
def STABLE_SUPPORT_BUNDLE_IMAGE
def STABLE_CSI_ATTACHER_IMAGE
def STABLE_CSI_PROVISIONER_IMAGE
def STABLE_CSI_NODE_REGISTRAR_IMAGE
def STABLE_CSI_RESIZER_IMAGE
def STABLE_CSI_SNAPSHOTTER_IMAGE
def STABLE_CSI_LIVENESSPROBE_IMAGE

def TRANSIENT_MANAGER_IMAGE
def TRANSIENT_ENGINE_IMAGE
def TRANSIENT_INSTANCE_MANAGER_IMAGE
def TRANSIENT_SHARE_MANAGER_IMAGE
def TRANSIENT_BACKING_IMAGE_MANAGER_IMAGE
def TRANSIENT_UI_IMAGE
def TRANSIENT_SUPPORT_BUNDLE_IMAGE
def TRANSIENT_CSI_ATTACHER_IMAGE
def TRANSIENT_CSI_PROVISIONER_IMAGE
def TRANSIENT_CSI_NODE_REGISTRAR_IMAGE
def TRANSIENT_CSI_RESIZER_IMAGE
def TRANSIENT_CSI_SNAPSHOTTER_IMAGE
def TRANSIENT_CSI_LIVENESSPROBE_IMAGE

node {

    withCredentials([
        usernamePassword(credentialsId: CREDS_ID, passwordVariable: 'AWS_SECRET_KEY', usernameVariable: 'AWS_ACCESS_KEY'),
        usernamePassword(credentialsId: 'DOCKER_CREDS', passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME'),
        usernamePassword(credentialsId: 'APPCO_CREDS', passwordVariable: 'APPCO_PASSWORD', usernameVariable: 'APPCO_USERNAME'),
        string(credentialsId: REGISTRATION_CODE_ID, variable: 'REGISTRATION_CODE'),
        usernamePassword(credentialsId: 'LAB_API_KEY', passwordVariable: 'LAB_SECRET_KEY', usernameVariable: 'LAB_ACCESS_KEY'),
        string(credentialsId: 'LAB_URL', variable: 'LAB_URL'),
        file(credentialsId: 'SUSE_INTERNAL_CA', variable: 'CA_CERT_PATH'),  // Add the secret file credential here
        string(credentialsId: 'QASE_TOKEN', variable: 'QASE_TOKEN'),
    ]) {

        if (params.SEND_SLACK_NOTIFICATION) {
            notifyBuild('STARTED', BUILD_TRIGGER_BY, params.NOTIFY_SLACK_CHANNEL)
        }

        checkout scm

        try {
            stage('Parse Images') {
                def stableImagesYaml = readYaml text: params.STABLE_VERSION_IMAGES
                def transientImagesYaml = readYaml text: params.TRANSIENT_VERSION_IMAGES

                STABLE_MANAGER_IMAGE = stableImagesYaml['longhorn-manager-image']
                STABLE_ENGINE_IMAGE = stableImagesYaml['longhorn-engine-image']
                STABLE_INSTANCE_MANAGER_IMAGE = stableImagesYaml['longhorn-instance-manager-image']
                STABLE_SHARE_MANAGER_IMAGE = stableImagesYaml['longhorn-share-manager-image']
                STABLE_BACKING_IMAGE_MANAGER_IMAGE = stableImagesYaml['longhorn-backing-image-manager-image']
                STABLE_UI_IMAGE = stableImagesYaml['longhorn-ui-image']
                STABLE_SUPPORT_BUNDLE_IMAGE = stableImagesYaml['support-bundle-image']
                STABLE_CSI_ATTACHER_IMAGE = stableImagesYaml['csi-attacher-image']
                STABLE_CSI_PROVISIONER_IMAGE = stableImagesYaml['csi-provisioner-image']
                STABLE_CSI_NODE_REGISTRAR_IMAGE = stableImagesYaml['csi-node-registrar-image']
                STABLE_CSI_RESIZER_IMAGE = stableImagesYaml['csi-resizer-image']
                STABLE_CSI_SNAPSHOTTER_IMAGE = stableImagesYaml['csi-snapshotter-image']
                STABLE_CSI_LIVENESSPROBE_IMAGE = stableImagesYaml['csi-livenessprobe-image']

                TRANSIENT_MANAGER_IMAGE = transientImagesYaml['longhorn-manager-image']
                TRANSIENT_ENGINE_IMAGE = transientImagesYaml['longhorn-engine-image']
                TRANSIENT_INSTANCE_MANAGER_IMAGE = transientImagesYaml['longhorn-instance-manager-image']
                TRANSIENT_SHARE_MANAGER_IMAGE = transientImagesYaml['longhorn-share-manager-image']
                TRANSIENT_BACKING_IMAGE_MANAGER_IMAGE = transientImagesYaml['longhorn-backing-image-manager-image']
                TRANSIENT_UI_IMAGE = transientImagesYaml['longhorn-ui-image']
                TRANSIENT_SUPPORT_BUNDLE_IMAGE = transientImagesYaml['support-bundle-image']
                TRANSIENT_CSI_ATTACHER_IMAGE = transientImagesYaml['csi-attacher-image']
                TRANSIENT_CSI_PROVISIONER_IMAGE = transientImagesYaml['csi-provisioner-image']
                TRANSIENT_CSI_NODE_REGISTRAR_IMAGE = transientImagesYaml['csi-node-registrar-image']
                TRANSIENT_CSI_RESIZER_IMAGE = transientImagesYaml['csi-resizer-image']
                TRANSIENT_CSI_SNAPSHOTTER_IMAGE = transientImagesYaml['csi-snapshotter-image']
                TRANSIENT_CSI_LIVENESSPROBE_IMAGE = transientImagesYaml['csi-livenessprobe-image']
            }

            if (params.AIR_GAP_INSTALLATION) {
                stage('private registry build') {
                    sh "airgap/scripts/build.sh"
                    sh """ docker run -itd --name airgap-${JOB_BASE_NAME}-${BUILD_NUMBER} \
                                            -v /var/run/docker.sock:/var/run/docker.sock \
                                            --env TF_VAR_docker_hub_username=${REGISTRY_USERNAME} \
                                            --env TF_VAR_docker_hub_password=${REGISTRY_PASSWORD} \
                                            --env TF_VAR_aws_access_key=${AWS_ACCESS_KEY} \
                                            --env TF_VAR_aws_secret_key=${AWS_SECRET_KEY} \
                                            --env TF_VAR_arch=${ARCH}\
                                            --env TF_VAR_registry_aws_instance_type=${registry_instance_type}\
                                            --env TF_VAR_appco_test="true"\
                                            --env LONGHORN_REPO_BRANCH=${LONGHORN_REPO_BRANCH} \
                                            --env CUSTOM_LONGHORN_ENGINE_IMAGE=${CUSTOM_LONGHORN_ENGINE_IMAGE} \
                                            --env CUSTOM_LONGHORN_INSTANCE_MANAGER_IMAGE=${CUSTOM_LONGHORN_INSTANCE_MANAGER_IMAGE} \
                                            --env CUSTOM_LONGHORN_MANAGER_IMAGE=${CUSTOM_LONGHORN_MANAGER_IMAGE} \
                                            --env CUSTOM_LONGHORN_SHARE_MANAGER_IMAGE=${CUSTOM_LONGHORN_SHARE_MANAGER_IMAGE} \
                                            --env CUSTOM_LONGHORN_BACKING_IMAGE_MANAGER_IMAGE=${CUSTOM_LONGHORN_BACKING_IMAGE_MANAGER_IMAGE} \
                                            --env CUSTOM_LONGHORN_UI_IMAGE=${CUSTOM_LONGHORN_UI_IMAGE} \
                                            --env CUSTOM_LONGHORN_SUPPORT_BUNDLE_IMAGE=${CUSTOM_LONGHORN_SUPPORT_BUNDLE_IMAGE} \
                                            --env CUSTOM_LONGHORN_CSI_ATTACHER_IMAGE=${CUSTOM_LONGHORN_CSI_ATTACHER_IMAGE} \
                                            --env CUSTOM_LONGHORN_CSI_PROVISIONER_IMAGE=${CUSTOM_LONGHORN_CSI_PROVISIONER_IMAGE} \
                                            --env CUSTOM_LONGHORN_CSI_NODE_DRIVER_REGISTRAR_IMAGE=${CUSTOM_LONGHORN_CSI_NODE_DRIVER_REGISTRAR_IMAGE} \
                                            --env CUSTOM_LONGHORN_CSI_RESIZER_IMAGE=${CUSTOM_LONGHORN_CSI_RESIZER_IMAGE} \
                                            --env CUSTOM_LONGHORN_CSI_SNAPSHOTTER_IMAGE=${CUSTOM_LONGHORN_CSI_SNAPSHOTTER_IMAGE} \
                                            --env CUSTOM_LONGHORN_CSI_LIVENESSPROBE_IMAGE=${CUSTOM_LONGHORN_CSI_LIVENESSPROBE_IMAGE} \
                                            --env LONGHORN_UPGRADE_TEST=${LONGHORN_UPGRADE_TEST} \
                                            --env LONGHORN_STABLE_VERSION=${LONGHORN_STABLE_VERSION} \
                                            --env STABLE_MANAGER_IMAGE=${STABLE_MANAGER_IMAGE} \
                                            --env STABLE_ENGINE_IMAGE=${STABLE_ENGINE_IMAGE} \
                                            --env STABLE_INSTANCE_MANAGER_IMAGE=${STABLE_INSTANCE_MANAGER_IMAGE} \
                                            --env STABLE_SHARE_MANAGER_IMAGE=${STABLE_SHARE_MANAGER_IMAGE} \
                                            --env STABLE_BACKING_IMAGE_MANAGER_IMAGE=${STABLE_BACKING_IMAGE_MANAGER_IMAGE} \
                                            --env STABLE_UI_IMAGE=${STABLE_UI_IMAGE} \
                                            --env STABLE_SUPPORT_BUNDLE_IMAGE=${STABLE_SUPPORT_BUNDLE_IMAGE} \
                                            --env STABLE_CSI_ATTACHER_IMAGE=${STABLE_CSI_ATTACHER_IMAGE} \
                                            --env STABLE_CSI_PROVISIONER_IMAGE=${STABLE_CSI_PROVISIONER_IMAGE} \
                                            --env STABLE_CSI_NODE_REGISTRAR_IMAGE=${STABLE_CSI_NODE_REGISTRAR_IMAGE} \
                                            --env STABLE_CSI_RESIZER_IMAGE=${STABLE_CSI_RESIZER_IMAGE} \
                                            --env STABLE_CSI_SNAPSHOTTER_IMAGE=${STABLE_CSI_SNAPSHOTTER_IMAGE} \
                                            --env STABLE_CSI_LIVENESSPROBE_IMAGE=${STABLE_CSI_LIVENESSPROBE_IMAGE} \
                                            --env LONGHORN_TRANSIENT_VERSION=${LONGHORN_TRANSIENT_VERSION} \
                                            --env TRANSIENT_MANAGER_IMAGE=${TRANSIENT_MANAGER_IMAGE} \
                                            --env TRANSIENT_ENGINE_IMAGE=${TRANSIENT_ENGINE_IMAGE} \
                                            --env TRANSIENT_INSTANCE_MANAGER_IMAGE=${TRANSIENT_INSTANCE_MANAGER_IMAGE} \
                                            --env TRANSIENT_SHARE_MANAGER_IMAGE=${TRANSIENT_SHARE_MANAGER_IMAGE} \
                                            --env TRANSIENT_BACKING_IMAGE_MANAGER_IMAGE=${TRANSIENT_BACKING_IMAGE_MANAGER_IMAGE} \
                                            --env TRANSIENT_UI_IMAGE=${TRANSIENT_UI_IMAGE} \
                                            --env TRANSIENT_SUPPORT_BUNDLE_IMAGE=${TRANSIENT_SUPPORT_BUNDLE_IMAGE} \
                                            --env TRANSIENT_CSI_ATTACHER_IMAGE=${TRANSIENT_CSI_ATTACHER_IMAGE} \
                                            --env TRANSIENT_CSI_PROVISIONER_IMAGE=${TRANSIENT_CSI_PROVISIONER_IMAGE} \
                                            --env TRANSIENT_CSI_NODE_REGISTRAR_IMAGE=${TRANSIENT_CSI_NODE_REGISTRAR_IMAGE} \
                                            --env TRANSIENT_CSI_RESIZER_IMAGE=${TRANSIENT_CSI_RESIZER_IMAGE} \
                                            --env TRANSIENT_CSI_SNAPSHOTTER_IMAGE=${TRANSIENT_CSI_SNAPSHOTTER_IMAGE} \
                                            --env TRANSIENT_CSI_LIVENESSPROBE_IMAGE=${TRANSIENT_CSI_LIVENESSPROBE_IMAGE} \
                                            airgap-${JOB_BASE_NAME}-${BUILD_NUMBER}
                    """
                }

                stage ('private registry setup') {
                    sh "docker exec airgap-${JOB_BASE_NAME}-${BUILD_NUMBER} ./airgap/scripts/terraform-setup.sh"
                    REGISTRY_URL = sh (
                        script: "docker exec airgap-${JOB_BASE_NAME}-${BUILD_NUMBER} terraform -chdir=./airgap/terraform output -raw registry_url",
                        returnStdout: true
                    )
                    println REGISTRY_URL
                    REGISTRY_USERNAME = sh (
                        script: "docker exec airgap-${JOB_BASE_NAME}-${BUILD_NUMBER} terraform -chdir=./airgap/terraform output -raw registry_username",
                        returnStdout: true
                    )
                    REGISTRY_PASSWORD = sh (
                        script: "docker exec airgap-${JOB_BASE_NAME}-${BUILD_NUMBER} terraform -chdir=./airgap/terraform output -raw registry_password",
                        returnStdout: true
                    )
                    // Pull appco images and push to private registry
                    sh """ docker exec \
                            --env REGISTRY_URL=${REGISTRY_URL} \
                            --env REGISTRY_USERNAME=${REGISTRY_USERNAME} \
                            --env REGISTRY_PASSWORD=${REGISTRY_PASSWORD} \
                            --env APPCO_USERNAME=${APPCO_USERNAME} \
                            --env APPCO_PASSWORD=${APPCO_PASSWORD} \
                            airgap-${JOB_BASE_NAME}-${BUILD_NUMBER} ./pipelines/appco/scripts/prepare_airgap_appco_images.sh
                    """
                }
            }

            stage('build') {
                if(JOB_BASE_NAME == "longhorn-tests-regression") {

                    manager.addShortText(BUILD_TRIGGER_BY.replace("\nStarted by user ", ""), "grey", "white", "0px", "white")

                }

                echo "Using credentials: $CREDS_ID"
                echo "Using registration code: $REGISTRATION_CODE_ID"

                sh "cp ${CA_CERT_PATH} SUSE_Trust_Root.crt"
                sh "pipelines/appco/scripts/build.sh"
                sh """ docker run -itd --name ${JOB_BASE_NAME}-${BUILD_NUMBER} \
                                       --env LONGHORN_REPO_URI=${LONGHORN_REPO_URI} \
                                       --env LONGHORN_REPO_BRANCH=${LONGHORN_REPO_BRANCH} \
                                       --env JOB_NAME=${JOB_BASE_NAME}-${BUILD_NUMBER} \
                                       --env AIR_GAP_INSTALLATION=${AIR_GAP_INSTALLATION} \
                                       --env REGISTRY_URL=${REGISTRY_URL} \
                                       --env REGISTRY_USERNAME=${REGISTRY_USERNAME} \
                                       --env REGISTRY_PASSWORD=${REGISTRY_PASSWORD} \
                                       --env CUSTOM_LONGHORN_ENGINE_IMAGE=${CUSTOM_LONGHORN_ENGINE_IMAGE} \
                                       --env CUSTOM_LONGHORN_INSTANCE_MANAGER_IMAGE=${CUSTOM_LONGHORN_INSTANCE_MANAGER_IMAGE} \
                                       --env CUSTOM_LONGHORN_MANAGER_IMAGE=${CUSTOM_LONGHORN_MANAGER_IMAGE} \
                                       --env CUSTOM_LONGHORN_SHARE_MANAGER_IMAGE=${CUSTOM_LONGHORN_SHARE_MANAGER_IMAGE} \
                                       --env CUSTOM_LONGHORN_BACKING_IMAGE_MANAGER_IMAGE=${CUSTOM_LONGHORN_BACKING_IMAGE_MANAGER_IMAGE} \
                                       --env CUSTOM_LONGHORN_UI_IMAGE=${CUSTOM_LONGHORN_UI_IMAGE} \
                                       --env CUSTOM_LONGHORN_SUPPORT_BUNDLE_IMAGE=${CUSTOM_LONGHORN_SUPPORT_BUNDLE_IMAGE} \
                                       --env CUSTOM_LONGHORN_CSI_ATTACHER_IMAGE=${CUSTOM_LONGHORN_CSI_ATTACHER_IMAGE} \
                                       --env CUSTOM_LONGHORN_CSI_PROVISIONER_IMAGE=${CUSTOM_LONGHORN_CSI_PROVISIONER_IMAGE} \
                                       --env CUSTOM_LONGHORN_CSI_NODE_DRIVER_REGISTRAR_IMAGE=${CUSTOM_LONGHORN_CSI_NODE_DRIVER_REGISTRAR_IMAGE} \
                                       --env CUSTOM_LONGHORN_CSI_RESIZER_IMAGE=${CUSTOM_LONGHORN_CSI_RESIZER_IMAGE} \
                                       --env CUSTOM_LONGHORN_CSI_SNAPSHOTTER_IMAGE=${CUSTOM_LONGHORN_CSI_SNAPSHOTTER_IMAGE} \
                                       --env CUSTOM_LONGHORN_CSI_LIVENESSPROBE_IMAGE=${CUSTOM_LONGHORN_CSI_LIVENESSPROBE_IMAGE} \
                                       --env LONGHORN_TESTS_CUSTOM_IMAGE=${LONGHORN_TESTS_CUSTOM_IMAGE} \
                                       --env CUSTOM_TEST_OPTIONS="${CUSTOM_TEST_OPTIONS}" \
                                       --env DISTRO=${DISTRO} \
                                       --env LONGHORN_TEST_CLOUDPROVIDER=${LONGHORN_TEST_CLOUDPROVIDER} \
                                       --env LONGHORN_UPGRADE_TEST=${LONGHORN_UPGRADE_TEST} \
                                       --env LONGHORN_STABLE_VERSION=${LONGHORN_STABLE_VERSION} \
                                       --env LONGHORN_TRANSIENT_VERSION=${LONGHORN_TRANSIENT_VERSION} \
                                       --env STABLE_MANAGER_IMAGE=${STABLE_MANAGER_IMAGE} \
                                       --env STABLE_ENGINE_IMAGE=${STABLE_ENGINE_IMAGE} \
                                       --env STABLE_INSTANCE_MANAGER_IMAGE=${STABLE_INSTANCE_MANAGER_IMAGE} \
                                       --env STABLE_SHARE_MANAGER_IMAGE=${STABLE_SHARE_MANAGER_IMAGE} \
                                       --env STABLE_BACKING_IMAGE_MANAGER_IMAGE=${STABLE_BACKING_IMAGE_MANAGER_IMAGE} \
                                       --env STABLE_UI_IMAGE=${STABLE_UI_IMAGE} \
                                       --env STABLE_SUPPORT_BUNDLE_IMAGE=${STABLE_SUPPORT_BUNDLE_IMAGE} \
                                       --env STABLE_CSI_ATTACHER_IMAGE=${STABLE_CSI_ATTACHER_IMAGE} \
                                       --env STABLE_CSI_PROVISIONER_IMAGE=${STABLE_CSI_PROVISIONER_IMAGE} \
                                       --env STABLE_CSI_NODE_REGISTRAR_IMAGE=${STABLE_CSI_NODE_REGISTRAR_IMAGE} \
                                       --env STABLE_CSI_RESIZER_IMAGE=${STABLE_CSI_RESIZER_IMAGE} \
                                       --env STABLE_CSI_SNAPSHOTTER_IMAGE=${STABLE_CSI_SNAPSHOTTER_IMAGE} \
                                       --env STABLE_CSI_LIVENESSPROBE_IMAGE=${STABLE_CSI_LIVENESSPROBE_IMAGE} \
                                       --env TRANSIENT_MANAGER_IMAGE=${TRANSIENT_MANAGER_IMAGE} \
                                       --env TRANSIENT_ENGINE_IMAGE=${TRANSIENT_ENGINE_IMAGE} \
                                       --env TRANSIENT_INSTANCE_MANAGER_IMAGE=${TRANSIENT_INSTANCE_MANAGER_IMAGE} \
                                       --env TRANSIENT_SHARE_MANAGER_IMAGE=${TRANSIENT_SHARE_MANAGER_IMAGE} \
                                       --env TRANSIENT_BACKING_IMAGE_MANAGER_IMAGE=${TRANSIENT_BACKING_IMAGE_MANAGER_IMAGE} \
                                       --env TRANSIENT_UI_IMAGE=${TRANSIENT_UI_IMAGE} \
                                       --env TRANSIENT_SUPPORT_BUNDLE_IMAGE=${TRANSIENT_SUPPORT_BUNDLE_IMAGE} \
                                       --env TRANSIENT_CSI_ATTACHER_IMAGE=${TRANSIENT_CSI_ATTACHER_IMAGE} \
                                       --env TRANSIENT_CSI_PROVISIONER_IMAGE=${TRANSIENT_CSI_PROVISIONER_IMAGE} \
                                       --env TRANSIENT_CSI_NODE_REGISTRAR_IMAGE=${TRANSIENT_CSI_NODE_REGISTRAR_IMAGE} \
                                       --env TRANSIENT_CSI_RESIZER_IMAGE=${TRANSIENT_CSI_RESIZER_IMAGE} \
                                       --env TRANSIENT_CSI_SNAPSHOTTER_IMAGE=${TRANSIENT_CSI_SNAPSHOTTER_IMAGE} \
                                       --env TRANSIENT_CSI_LIVENESSPROBE_IMAGE=${TRANSIENT_CSI_LIVENESSPROBE_IMAGE} \
                                       --env TF_VAR_extra_block_device="true" \
                                       --env BACKUP_STORE_TYPE="${BACKUP_STORE_TYPE}" \
                                       --env TF_VAR_arch=${ARCH} \
                                       --env TF_VAR_tf_workspace=${TF_VAR_tf_workspace} \
                                       --env TF_VAR_k8s_distro_name=${K8S_DISTRO_NAME} \
                                       --env TF_VAR_k8s_distro_version=${K8S_DISTRO_VERSION} \
                                       --env TF_VAR_aws_availability_zone=${AWS_AVAILABILITY_ZONE} \
                                       --env TF_VAR_aws_region=${AWS_REGION} \
                                       --env TF_VAR_os_distro_version=${DISTRO_VERSION} \
                                       --env TF_VAR_lh_aws_access_key=${AWS_ACCESS_KEY} \
                                       --env TF_VAR_lh_aws_instance_name_controlplane="${JOB_BASE_NAME}-ctrl" \
                                       --env TF_VAR_lh_aws_instance_name_worker="${JOB_BASE_NAME}-wrk" \
                                       --env TF_VAR_lh_aws_instance_type_controlplane=${CONTROLPLANE_INSTANCE_TYPE} \
                                       --env TF_VAR_lh_aws_instance_type_worker=${WORKER_INSTANCE_TYPE}\
                                       --env TF_VAR_lh_aws_secret_key=${AWS_SECRET_KEY} \
                                       --env TF_VAR_selinux_mode=${SELINUX_MODE} \
                                       --env TF_VAR_registration_code=${REGISTRATION_CODE} \
                                       --env TF_VAR_lab_url=${LAB_URL} \
                                       --env TF_VAR_lab_access_key=${LAB_ACCESS_KEY} \
                                       --env TF_VAR_lab_secret_key=${LAB_SECRET_KEY} \
                                       --env RUN_V2_TEST=${RUN_V2_TEST} \
                                       --env TF_VAR_cis_hardening=${CIS_HARDENING} \
                                       --env TF_VAR_custom_ssh_public_key="${CUSTOM_SSH_PUBLIC_KEY}" \
                                       --env QASE_TOKEN=${QASE_TOKEN} \
                                       --env QASE_PROJECT=LH \
                                       --env APPCO_TEST="true" \
                                       --env LONGHORN_INSTALL_METHOD="manifest" \
                                       ${imageName}
                """

            }

            timeout(60) {
                stage ('terraform') {
                    sh "docker exec ${JOB_BASE_NAME}-${BUILD_NUMBER} ${TF_VAR_tf_workspace}/scripts/terraform-setup.sh"
                }
			}

            stage ('longhorn setup & tests') {
                sh "docker exec ${JOB_BASE_NAME}-${BUILD_NUMBER} pipelines/appco/scripts/longhorn_setup.sh"
            }

            stage ('report generation') {                
                sh "docker cp ${JOB_BASE_NAME}-${BUILD_NUMBER}:${WORKSPACE}/longhorn-test-junit-report.xml ."
                if(params.LONGHORN_UPGRADE_TEST) {
                    sh "docker cp ${JOB_BASE_NAME}-${BUILD_NUMBER}:${WORKSPACE}/longhorn-test-upgrade-junit-report.xml ."
                    summary = junit 'longhorn-test-upgrade-junit-report.xml, longhorn-test-junit-report.xml'
                }
                else {
                    summary = junit 'longhorn-test-junit-report.xml'
                }
            }
        } catch (e) {
            currentBuild.result = "FAILED"
            throw e
        } finally {
            stage ('releasing resources') {
                if (sh (script: "docker container inspect airgap-${JOB_BASE_NAME}-${BUILD_NUMBER} > /dev/null 2>&1", returnStatus: true) == 0) {
                    sh "docker exec airgap-${JOB_BASE_NAME}-${BUILD_NUMBER} ./airgap/scripts/cleanup.sh"
                    sh "docker stop airgap-${JOB_BASE_NAME}-${BUILD_NUMBER}"
                    sh "docker rm -v airgap-${JOB_BASE_NAME}-${BUILD_NUMBER}"
                    sh "docker rmi airgap-${JOB_BASE_NAME}-${BUILD_NUMBER}"
                }

                if (sh (script: "docker container inspect ${JOB_BASE_NAME}-${BUILD_NUMBER} > /dev/null 2>&1", returnStatus: true) == 0) {
                    sh "docker exec ${JOB_BASE_NAME}-${BUILD_NUMBER} pipelines/utilities/cleanup.sh"
                    sh "docker stop ${JOB_BASE_NAME}-${BUILD_NUMBER}"
                    sh "docker rm -v ${JOB_BASE_NAME}-${BUILD_NUMBER}"
                    sh "docker rmi ${imageName}"
                }

                if (summary) {
                    summary_msg = "\nTest Summary - Failures: ${summary.failCount}, Skipped: ${summary.skipCount}, Passed: ${summary.passCount}  -- Job completed in ${currentBuild.durationString.replace(' and counting', '')}"
                } else {
                    summary_msg = "\n Test Failed: No Junit report"
                }

                if(params.SEND_SLACK_NOTIFICATION){
                    notifyBuild(currentBuild.result, summary_msg, params.NOTIFY_SLACK_CHANNEL)
                }
            }
        }
    }
}


def notifyBuild(String buildStatus = 'STARTED', String summary_msg, String slack_channel) {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_BASE_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})" + summary_msg

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary, channel: slack_channel,  tokenCredentialId: 'longhorn-tests-slack-token')
}
